library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity vga_teste is
port (clk: in bit;
reset : in std_logic;
		swt_sentido: in bit;
		btn_confirma, btn_esq_up, btn_dir_down: in bit;
    --VGA_CLK: out bit; --,    -- Dot clock to DAC
    VGA_HS,     -- Active-Low Horizontal Sync
    VGA_VS: OUT STD_LOGIC; --,     -- Active-Low Vertical Sync
    --VGA_BLANK, -- Active-Low DAC blanking control
    --VGA_SYNC : out std_logic; -- Active-Low DAC Sync on Green
    VGA_R, VGA_G, VGA_B : out std_logic_vector(3 downto 0)

);
      --clk25: out bit);


end entity;

architecture algorithmic of vga_teste is
signal vga_h, vga_v: STD_LOGIC; --, vga_bl, vga_sy: std_logic;
signal vga_red, vga_green, vga_blue: std_logic_vector(3 downto 0);
signal vga_clock, clk25: bit;
begin
  p0: process (clk) is
  variable contador: natural range 0 to 2:=0;
  variable clk_aux: bit;
  begin
    if clk='1' then
	   contador:=contador+1;
		if (contador=1) then
		  contador:=0;
		  clk_aux:=not clk_aux;
		  clk25<=clk_aux;
		 end if; 
	 end if;	
		
  end process;
  
     e0: entity work.vga_raster_traffic
	         port map(reset, clk25, btn_confirma, btn_esq_up, btn_dir_down, vga_h, vga_v, vga_red, vga_green, vga_blue);
			
VGA_HS<=vga_h;
VGA_VS<=vga_v;
VGA_R<=vga_red;			
VGA_G<=vga_green;
VGA_B<=vga_blue;
end architecture;		